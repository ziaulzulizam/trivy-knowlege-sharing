#!/bin/bash
# cvss-analysis.sh - Analyze CVSS scores and prioritize vulnerabilities

echo "=== TRIVY VULNERABILITY ASSESSMENT AND PRIORITIZATION ==="

# Generate comprehensive JSON report
trivy image --format json --output detailed-report.json myregistry/vulnerable-php-app:v1.0.0

# Extract and analyze CVSS scores
echo "=== CRITICAL VULNERABILITIES (CVSS >= 9.0) ==="
cat detailed-report.json | jq -r '
  .Results[]? | 
  select(.Vulnerabilities) | 
  .Vulnerabilities[] | 
  select(.CVSS.nvd.V3Score >= 9.0) | 
  "CVE: \(.VulnerabilityID) | CVSS: \(.CVSS.nvd.V3Score) | Package: \(.PkgName) | Severity: \(.Severity)"'

echo ""
echo "=== HIGH VULNERABILITIES (CVSS 7.0-8.9) ==="
cat detailed-report.json | jq -r '
  .Results[]? | 
  select(.Vulnerabilities) | 
  .Vulnerabilities[] | 
  select(.CVSS.nvd.V3Score >= 7.0 and .CVSS.nvd.V3Score < 9.0) | 
  "CVE: \(.VulnerabilityID) | CVSS: \(.CVSS.nvd.V3Score) | Package: \(.PkgName) | Severity: \(.Severity)"'

echo ""
echo "=== EXPLOITABILITY ANALYSIS ==="
# Check for known exploited vulnerabilities (would need EPSS database integration)
cat detailed-report.json | jq -r '
  .Results[]? | 
  select(.Vulnerabilities) | 
  .Vulnerabilities[] | 
  select(.VulnerabilityID) | 
  "CVE: \(.VulnerabilityID) | Title: \(.Title) | Package: \(.PkgName)"'

echo ""
echo "=== VULNERABILITY SUMMARY ==="
cat detailed-report.json | jq -r '
  [.Results[]?.Vulnerabilities[]? | .Severity] | 
  group_by(.) | 
  map({severity: .[0], count: length}) | 
  .[] | 
  "Severity: \(.severity) | Count: \(.count)"'

echo ""
echo "=== PRIORITY-BASED SCANS ==="
echo "=== IMMEDIATE ACTION REQUIRED (CRITICAL) ==="
trivy image --severity CRITICAL --format table myregistry/vulnerable-php-app:v1.0.0

echo ""
echo "=== SCHEDULE FOR NEXT RELEASE (HIGH) ==="
trivy image --severity HIGH --format table myregistry/vulnerable-php-app:v1.0.0

echo ""
echo "=== BACKLOG ITEMS (MEDIUM) ==="
trivy image --severity MEDIUM --format table myregistry/vulnerable-php-app:v1.0.0